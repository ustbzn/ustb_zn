# -*- coding: UTF-8 -*-
import numpy as np
import matplotlib.pyplot as plt
import time


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y




def cal_distance(point_1, point_2):
    distance = np.sqrt((point_1[0] - point_2[0]) ** 2 + (point_1[1] - point_2[1]) ** 2)
    return distance

def cal_selfdistance(point_1):
    selfdistance = np.sqrt(point_1[0] ** 2 + point_1[1] ** 2) 
    return selfdistance

def plot_data(pcd):
    shape = pcd.shape
    num = int(pcd[shape[0] - 1, shape[1] - 1])
    print('pcd_num',num)
    ###print('pcd:',pcd)
    pcd_0 = []
    pcd_1 = []
    pcd_2 = []
    pcd_3 = []
    pcd_4 = []
    for i in pcd:
        if i[2] == 0:
            pcd_0.append([i[0], i[1]])
        if i[2] == 1:
            pcd_1.append([i[0], i[1]])
        if i[2] == 2:
            pcd_2.append([i[0], i[1]])
        if i[2] == 3:
            pcd_3.append([i[0], i[1]])
        if i[2] == 4:
            pcd_4.append([i[0], i[1]])
    plt.cla()
    pcd_0 = np.array(pcd_0)
    pcd_1 = np.array(pcd_1)
    pcd_2 = np.array(pcd_2)
    pcd_3 = np.array(pcd_3)
    pcd_4 = np.array(pcd_4)
    '''
    ''
    print("pcd_0-",pcd_0)
    print("pcd_1-",pcd_1)
    print("pcd_2-",pcd_2)
    print("pcd_3-",pcd_3)
    ''
    '''
    for i in range(num + 1):
        if i == 0:
            # plt.scatter(pcd_0[:][0], pcd_0[:][1])
            plt.scatter(pcd_0[:, 0], pcd_0[:, 1])
        if i == 1:
            # plt.scatter(pcd_1[:][0], pcd_1[:][1])
            plt.scatter(pcd_1[:, 0], pcd_1[:, 1])
        if i == 2:
            plt.scatter(pcd_2[:, 0], pcd_2[:, 1])
        if i == 3:
            plt.scatter(pcd_3[:, 0], pcd_3[:, 1])
        if i == 4:
            plt.scatter(pcd_4[:, 0], pcd_4[:, 1])

    plt.pause(0.0001)
def plot_list(list):
    num = len(list)
    plt.cla()
    pcd = []
    #print("*************************",list,"%%%%%%%%%%%%")
    if num== 0:
         pass
    if num== 1:
          pcd_0 = np.array(list[0])
    if num== 2:
          pcd_0 = np.array(list[0])
          pcd_1 = np.array(list[1])
    if num== 3:
          pcd_0 = np.array(list[0])
          pcd_1 = np.array(list[1])
          pcd_2 = np.array(list[2])
    if num== 4:
          pcd_0 = np.array(list[0])
          pcd_1 = np.array(list[1])
          pcd_2 = np.array(list[2])
          pcd_3 = np.array(list[3])
    if num>= 5:
          pcd_0 = np.array(list[0])
          pcd_1 = np.array(list[1])
          pcd_2 = np.array(list[2])
          pcd_3 = np.array(list[3])
          pcd_4 = np.array(list[4])
    '''
    ''
     print("pcd_0-",pcd_0)
    print("pcd_0-",pcd_0)
    print("pcd_1-",pcd_1)
    print("pcd_2-",pcd_2)
    print("pcd_3-",pcd_3)
    ''
    '''
    print('pcd_num',num)
    for i in range(num ):
        if i == 0:
            # plt.scatter(pcd_0[:][0], pcd_0[:][1])
            plt.scatter(pcd_0[:, 0], pcd_0[:, 1])
        if i == 1:
            # plt.scatter(pcd_1[:][0], pcd_1[:][1])
            plt.scatter(pcd_1[:, 0], pcd_1[:, 1])
        if i == 2:
            plt.scatter(pcd_2[:, 0], pcd_2[:, 1])
        if i == 3:
            plt.scatter(pcd_3[:, 0], pcd_3[:, 1])
        if i == 4:
            plt.scatter(pcd_4[:, 0], pcd_4[:, 1])
    plt.pause(0.0001)



def ti_chu_li_qun_dian(pcd, treshold=1,treshold_de=0.2):
    pcd = pcd.tolist()

    pcd_new = []
    for i in range(len(pcd)):
        if i == 0:
            if((cal_distance(pcd[i], pcd[i + 1]) < treshold)and(cal_selfdistance(pcd[i])>treshold_de)):
                pcd_new.append(pcd[i])
            continue
        if i == len(pcd) - 1:
            if ((cal_distance(pcd[i], pcd[i - 1]) < treshold)and(cal_selfdistance(pcd[i])>treshold_de)):
                pcd_new.append(pcd[i])
            continue
        if ((cal_distance(pcd[i], pcd[i - 1]) < treshold or cal_distance(pcd[i], pcd[i + 1]) < treshold)and(cal_selfdistance(pcd[i])>treshold_de)):
            pcd_new.append(pcd[i])
    pcd_new = np.array(pcd_new)
    #plt.scatter(pcd_new[:, 0], pcd_new[:, 1])
    #plt.pause(0.0001)
    return pcd_new

def classify(pcd_all):    #####将点按不同聚类封装到一个list
    list = []
    Y = pcd_all[:, 2]
    num = int(Y[-1] + 1)
    for i in range(num):
        list.append(pcd_all[pcd_all[:, 2] == i, :2].tolist()) #tolist:将numpy数组转换为列表

    return list
def ju_lei(pcd, threshold=0.7, julei_min_number=6):#直接输出已经聚好的，处理过的类。
    ##############################################################
    start = time.time()
    pcd = pcd.tolist() 
    label = 0
    pcd_lei = []
    #print('len(pcd):',len(pcd))
    for i in range(len(pcd)):
        if i == 0:
            pcd[i].append(label)
            continue
        if cal_distance(pcd[i - 1], pcd[i]) < threshold:
           # print('i:',i,pcd[i-1],pcd[i])
            pcd[i].append(label)
        else:
             label += 1
             pcd[i].append(label)
    ###print('hou_pcd:',pcd)
    pcd_prcess = []
    for i in range(len(pcd)):
           pcd_prcess.append(pcd[i])
    pcd = np.array(pcd_prcess)      
    list = classify(pcd)
    for i in range(len(list)):
        if len(list[i])>julei_min_number:
            pcd_lei.append(list[i])
    end = time.time()
    print("julei _ time___________________________________________________",start-end)
    return pcd_lei


if __name__ == '__main__':
    # test
    pcd = [[0.03999999910593033, -0.7200000286102295], [0.05000000074505806, -0.7400000095367432], [0.07000000029802322, -0.7900000214576721], [0.09000000357627869, -0.8399999737739563], [0.10999999940395355, -0.8999999761581421], [0.14000000059604645, -0.9700000286102295], [0.17000000178813934, -1.0499999523162842], [0.20999999344348907, -1.1699999570846558], [0.28999999165534973, -1.5099999904632568], [0.3199999928474426, -1.5099999904632568], [0.4000000059604645, -1.7200000286102295], [0.5699999928474426, -2.2899999618530273], [0.6800000071525574, -2.549999952316284], [2.5799999237060547, -7.929999828338623], [2.7300000190734863, -7.940000057220459], [2.8499999046325684, -7.840000152587891], [2.759999990463257, -7.179999828338623], [2.5799999237060547, -6.389999866485596], [1.7599999904632568, -4.139999866485596], [1.5099999904632568, -3.390000104904175], [1.3899999856948853, -2.9700000286102295], [1.2699999809265137, -2.5999999046325684], [1.159999966621399, -2.2799999713897705], [1.350000023841858, -2.5399999618530273], [1.2200000286102295, -2.200000047683716], [1.1799999475479126, -2.049999952316284], [1.059999942779541, -1.7599999904632568], [1.0, -1.590000033378601], [0.5, -0.7599999904632568], [0.5099999904632568, -0.7599999904632568], [0.5899999737739563, -0.7799999713897705], [0.5299999713897705, -0.6800000071525574], [0.6299999952316284, -0.7699999809265137], [0.6499999761581421, -0.7699999809265137], [0.5099999904632568, -0.5899999737739563], [0.5199999809265137, -0.5799999833106995], [0.5299999713897705, -0.5699999928474426], [0.550000011920929, -0.5699999928474426], [0.5600000023841858, -0.5600000023841858], [0.5699999928474426, -0.550000011920929], [0.5899999737739563, -0.550000011920929], [0.6000000238418579, -0.5400000214576721], [0.6100000143051147, -0.5299999713897705], [0.6000000238418579, -0.5099999904632568], [0.6000000238418579, -0.47999998927116394], [0.6000000238418579, -0.4699999988079071], [0.6200000047683716, -0.4699999988079071], [0.6299999952316284, -0.46000000834465027], [0.6399999856948853, -0.44999998807907104], [0.6399999856948853, -0.4300000071525574], [0.6299999952316284, -0.4099999964237213], [0.6100000143051147, -0.3799999952316284], [0.6200000047683716, -0.3700000047683716], [1.0399999618530273, -0.6000000238418579], [1.090000033378601, -0.6000000238418579], [1.1200000047683716, -0.6000000238418579], [1.1299999952316284, -0.5799999833106995], [1.1399999856948853, -0.5600000023841858], [1.159999966621399, -0.5400000214576721], [2.130000114440918, -0.949999988079071], [2.180000066757202, -0.9300000071525574], [2.240000009536743, -0.8999999761581421], [0.49000000953674316, -0.1899999976158142], [0.49000000953674316, -0.18000000715255737], [0.49000000953674316, -0.17000000178813934], [0.47999998927116394, -0.1599999964237213], [0.47999998927116394, -0.15000000596046448], [0.8799999952316284, 0.23999999463558197], [0.8799999952316284, 0.25], [0.8700000047683716, 0.27000001072883606], [0.8600000143051147, 0.2800000011920929], [0.8600000143051147, 0.28999999165534973], [0.8500000238418579, 0.3100000023841858], [0.8399999737739563, 0.3199999928474426], [0.8299999833106995, 0.3400000035762787], [0.8299999833106995, 0.3499999940395355], [0.8199999928474426, 0.3700000047683716], [0.8199999928474426, 0.3799999952316284], [0.8100000023841858, 0.4000000059604645], [0.8100000023841858, 0.4099999964237213], [0.800000011920929, 0.4300000071525574], [0.7900000214576721, 0.4399999976158142], [0.7900000214576721, 0.46000000834465027], [0.7799999713897705, 0.4699999988079071], [0.7799999713897705, 0.49000000953674316], [0.7699999809265137, 0.5], [0.7599999904632568, 0.5199999809265137], [0.7599999904632568, 0.5299999713897705], [0.75, 0.550000011920929], [0.75, 0.5600000023841858], [0.7400000095367432, 0.5799999833106995], [0.7400000095367432, 0.6000000238418579], [0.7300000190734863, 0.6100000143051147], [0.7300000190734863, 0.6299999952316284], [0.7200000286102295, 0.6499999761581421], [0.7099999785423279, 0.6600000262260437], [0.7099999785423279, 0.6800000071525574], [0.699999988079071, 0.699999988079071], [0.6899999976158142, 0.7200000286102295], [0.6899999976158142, 0.7300000190734863], [0.6800000071525574, 0.75], [0.6700000166893005, 0.7699999809265137], [0.6600000262260437, 0.7900000214576721], [0.6600000262260437, 0.8100000023841858], [0.6499999761581421, 0.8299999833106995], [0.6399999856948853, 0.8500000238418579], [0.6299999952316284, 0.8700000047683716], [0.6200000047683716, 0.8899999856948853], [0.6200000047683716, 0.9100000262260437], [0.6100000143051147, 0.9399999976158142], [0.6000000238418579, 0.9599999785423279], [0.5899999737739563, 0.9800000190734863], [0.5799999833106995, 1.0], [0.5699999928474426, 1.0299999713897705], [0.3199999928474426, 0.6000000238418579], [0.30000001192092896, 0.6000000238418579], [0.28999999165534973, 0.5899999737739563], [0.27000001072883606, 0.5899999737739563], [0.25999999046325684, 0.5799999833106995], [0.23999999463558197, 0.5699999928474426], [0.23000000417232513, 0.5699999928474426], [0.2199999988079071, 0.5699999928474426], [0.20999999344348907, 0.5699999928474426], [0.1899999976158142, 0.5600000023841858], [0.18000000715255737, 0.5600000023841858], [0.17000000178813934, 0.550000011920929], [0.1599999964237213, 0.550000011920929], [0.15000000596046448, 0.5400000214576721], [0.14000000059604645, 0.5400000214576721], [0.11999999731779099, 0.5299999713897705], [0.10999999940395355, 0.5299999713897705], [0.10000000149011612, 0.5299999713897705], [0.09000000357627869, 0.5199999809265137], [0.07999999821186066, 0.5199999809265137], [0.07000000029802322, 0.5199999809265137], [0.05999999865889549, 0.5199999809265137], [0.05000000074505806, 0.5099999904632568], [0.03999999910593033, 0.5099999904632568], [0.03999999910593033, 0.5099999904632568], [0.029999999329447746, 0.5], [0.019999999552965164, 0.5], [0.009999999776482582, 0.5]]
    pcd = np.array(pcd)
    pcd = ju_lei(pcd)
    plot_data(pcd)
